/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../src/types"
import * as photon from "@generated/photon"
import { core } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  SaberPart: "CRYSTAL" | "CRYSTAL_VIBRATOR" | "HILT" | "POWER_CORE"
}

export interface NexusGenRootTypes {
  Item: photon.Item;
  Mutation: {};
  Query: {};
  Transaction: photon.Transaction;
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  SaberPart: NexusGenEnums['SaberPart'];
}

export interface NexusGenFieldTypes {
  Item: { // field return type
    id: string; // ID!
    partDescription: string | null; // String
    partName: string; // String!
    saberPart: NexusGenEnums['SaberPart']; // SaberPart!
  }
  Mutation: { // field return type
    CreateUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    GetUsers: NexusGenRootTypes['User'][]; // [User!]!
  }
  Transaction: { // field return type
    id: string; // ID!
    item: NexusGenRootTypes['Item']; // Item!
    price: number; // Int!
  }
  User: { // field return type
    id: string; // ID!
    name: string | null; // String
    purchases: NexusGenRootTypes['Transaction'][] | null; // [Transaction!]
    sells: NexusGenRootTypes['Transaction'][] | null; // [Transaction!]
    username: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateUser: { // args
      userName: string; // String!
    }
  }
  User: {
    purchases: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    sells: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Item" | "Mutation" | "Query" | "Transaction" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "SaberPart";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}